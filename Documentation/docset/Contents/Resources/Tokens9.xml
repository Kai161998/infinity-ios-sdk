<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/WTDataCollector.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/WTDataCollector</TokenIdentifier>
			<Abstract type="html">WTDataCollector is the central class provided by WebtrendsSDK. Its central purpose is to log and send events to the Webtrends collection servers. It&apos;s primarily accessed through its sharedCollector singleton. It should not be manually initialized.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WTDataCollector/sharedCollector</TokenIdentifier>
			<Abstract type="html">WTDataCollector should not be initialized manually, but should instead be messaged through this singleton instance.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedCollector</Declaration>
			
			<ReturnValue><Abstract type="html">The WTDataCollector singleton.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedCollector</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForApplication:startWithCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for the application starting. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForApplication:(NSString *)appName startWithCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>appName</Name>
					<Abstract type="html">Specifies the name of your application</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForApplication:startWithCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForApplication:terminateWithCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for the application terminating. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForApplication:(NSString *)appName terminateWithCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>appName</Name>
					<Abstract type="html">Specifies the name of your application</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForApplication:terminateWithCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForApplication:didEnterBackgroundWithCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for the application entering the background. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForApplication:(NSString *)appName didEnterBackgroundWithCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>appName</Name>
					<Abstract type="html">Specifies the name of your application</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForApplication:didEnterBackgroundWithCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForApplication:willEnterForegroundWithCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for the application entering the foreground. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForApplication:(NSString *)appName willEnterForegroundWithCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>appName</Name>
					<Abstract type="html">Specifies the name of your application</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForApplication:willEnterForegroundWithCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForApplication:withErrorMessage:customParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for the application errors.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForApplication:(NSString *)appName withErrorMessage:(NSString *)errorMessage customParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>appName</Name>
					<Abstract type="html">Specifies the name of your application</Abstract>
				</Parameter><Parameter>
					<Name>errorMessage</Name>
					<Abstract type="html">Specifies the error message associated with the error.</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForApplication:withErrorMessage:customParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForViewDidAppear:withCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a view controller appearing. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForViewDidAppear:(NSString *)controllerTitle withCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>controllerTitle</Name>
					<Abstract type="html">Specifies the title of the view controller</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForViewDidAppear:withCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForViewDidDisappear:withCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a view controller disappearing. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForViewDidDisappear:(NSString *)controllerTitle withCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>controllerTitle</Name>
					<Abstract type="html">Specifies the title of the view controller</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForViewDidDisappear:withCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForNotification:withCustomParams:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a notification firing. This can be used for both local and remote notifications. If automatic events are enabled, an event of this type will automatically be logged, if not, it can be manually logged with this method.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForNotification:(NSString *)notificationMessage withCustomParams:(NSDictionary *)customParams</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationMessage</Name>
					<Abstract type="html">Specifies the message presented in the notification</Abstract>
				</Parameter><Parameter>
					<Name>customParams</Name>
					<Abstract type="html">Specifies any user-defined data to be included with the event. Must be a dictionary with strings as both the key and the value. For example, a user id string to tie events to a given user.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForNotification:withCustomParams:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForAdClickName:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for an advertisement being tapped.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForAdClickName:(NSString *)adName eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>adName</Name>
					<Abstract type="html">Specifies the name of the advertisement.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForAdClickName:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForAdImpressionNames:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for an ad impression</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForAdImpressionNames:(NSArray *)adNames eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>adNames</Name>
					<Abstract type="html">Specifies an array of string ad names that were shown.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForAdImpressionNames:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForSearchPhrase:searchResult:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a search event</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForSearchPhrase:(NSString *)searchPhrase searchResult:(NSString *)searchResult eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>searchPhrase</Name>
					<Abstract type="html">Specifies the string the user searched for.</Abstract>
				</Parameter><Parameter>
					<Name>searchResult</Name>
					<Abstract type="html">Specifies the string of the search result.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForSearchPhrase:searchResult:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForContentView:contentGroup:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a content view such as when an article or image is viewed.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForContentView:(WTEventMeta *)meta contentGroup:(NSString *)contentGroup</Declaration>
			<Parameters>
				<Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter><Parameter>
					<Name>contentGroup</Name>
					<Abstract type="html">Specifies a group of related application views.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForContentView:contentGroup:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForScreenView:contentGroup:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a screen view such as when a screen, article, or image is viewed.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForScreenView:(WTEventMeta *)meta contentGroup:(NSString *)contentGroup</Declaration>
			<Parameters>
				<Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter><Parameter>
					<Name>contentGroup</Name>
					<Abstract type="html">Specifies a group of related application views.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForScreenView:contentGroup:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForProductId:productSku:contentGroup:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a product view</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForProductId:(NSString *)productId productSku:(NSString *)productSku contentGroup:(NSString *)contentGroup eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>productId</Name>
					<Abstract type="html">Specifies a product identifier.</Abstract>
				</Parameter><Parameter>
					<Name>productSku</Name>
					<Abstract type="html">Specifies a unique product stock-keeping unit (SKU) number.</Abstract>
				</Parameter><Parameter>
					<Name>contentGroup</Name>
					<Abstract type="html">Specifies a group of related application views.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForProductId:productSku:contentGroup:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForEventMedia:contentGroup:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a media view</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMedia</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForEventMedia:(WTEventMedia *)media contentGroup:(NSString *)contentGroup eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>media</Name>
					<Abstract type="html">Specifies a WTEventMedia object that stores parameter types associated with media events.</Abstract>
				</Parameter><Parameter>
					<Name>contentGroup</Name>
					<Abstract type="html">Specifies a group of related application views.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForEventMedia:contentGroup:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForConversion:contentGroup:eventMeta:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for a conversion, such as when a purchase or registration, occurs.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/WTEventMeta</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSDictionary *)triggerEventForConversion:(NSString *)conversionName contentGroup:(NSString *)contentGroup eventMeta:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>conversionName</Name>
					<Abstract type="html">Specifies the name used to identify a customer conversion.</Abstract>
				</Parameter><Parameter>
					<Name>contentGroup</Name>
					<Abstract type="html">Specifies a group of related application views.</Abstract>
				</Parameter><Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForConversion:contentGroup:eventMeta:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForAction:</TokenIdentifier>
			<Abstract type="html">Creates and schedules an event for an arbitrary action, such as a button tap</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForAction:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForAction:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/triggerEventForCustomEvent:</TokenIdentifier>
			<Abstract type="html">Creates and schedules a custom event, used to encapsulate any event not covered by the convenience event types.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)triggerEventForCustomEvent:(WTEventMeta *)meta</Declaration>
			<Parameters>
				<Parameter>
					<Name>meta</Name>
					<Abstract type="html">Specifies a WTEventMeta object that stores common parameter types attached to this event.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A dictionary of the event that is created</Abstract></ReturnValue>
			<Anchor>//api/name/triggerEventForCustomEvent:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/appendSessionParamsToUrl:</TokenIdentifier>
			<Abstract type="html">This method is used for maintaining a session within an embedded UIWebView. Before loading a new webview, use this method to append the current session information onto the URL you wish to load.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSURL *)appendSessionParamsToUrl:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url you wish to append</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The final URL to load in your webview, with the current session information appended as a query string.</Abstract></ReturnValue>
			<Anchor>//api/name/appendSessionParamsToUrl:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/openURL:</TokenIdentifier>
			<Abstract type="html">Opens the given URL in Safari after appending the current session information.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)openURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url to open.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/openURL:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/scheduleSend</TokenIdentifier>
			<Abstract type="html">Adds a single send operation onto the Data Collector&apos;s internal queue. Each send operation sends a batch of events to the collector&apos;s servers. Operations are executed in the order they are received.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)scheduleSend</Declaration>
			
			
			<Anchor>//api/name/scheduleSend</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/scheduleSendAll</TokenIdentifier>
			<Abstract type="html">Adds a send all operation onto the Data Collector&apos;s internal queue. This operation sends all events currently in the event store to the collector&apos;s servers. Operations are executed in the order they are received.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)scheduleSendAll</Declaration>
			
			
			<Anchor>//api/name/scheduleSendAll</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/pause</TokenIdentifier>
			<Abstract type="html">By default, the Data Collector will periodically send events to its data collection servers based on your configuration settings. This method temporarily disables that periodic sending. You can still manually send events using -scheduleSend and -scheduleSendAll while periodic sending is paused.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/resume</TokenIdentifier>
			<Abstract type="html">By default, the Data Collector will periodically send events to its data collection servers based on your configuration settings. This method resumes that periodic sending, and also immediately schedules a send event.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)resume</Declaration>
			
			
			<Anchor>//api/name/resume</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/valueForConfigKey:</TokenIdentifier>
			<Abstract type="html">Returns the value for a given Webtrends config key (or a user-defined key). See the Advanced Configuration Guide for a list of first party keys.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (id)valueForConfigKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the value you want returned</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value, as an id. Depending on the key supplied, this may be a NSNumber, an NSString, or an NSURL*</Abstract></ReturnValue>
			<Anchor>//api/name/valueForConfigKey:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/setValue:forConfigKey:</TokenIdentifier>
			<Abstract type="html">Sets a new value for a given Webtrends config key (or a user-defined key). See the Advanced Configuration Guide for a list of first party keys. This value will only be set in memory, use setValue:forConfigKey:persists: to store values permanently. Both the key and value must be NSString*</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)setValue:(NSString *)value forConfigKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to store, as an NSString*</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the value to be associated with</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forConfigKey:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/setValue:forConfigKey:persists:</TokenIdentifier>
			<Abstract type="html">Sets a new value for a given Webtrends config key (or a user-defined key). See the Advanced Configuration Guide for a list of first party keys. Both the key and value must be NSString*</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)setValue:(NSString *)value forConfigKey:(NSString *)key persists:(BOOL)persists</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to store, as an NSString*</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the value to be associated with</Abstract>
				</Parameter><Parameter>
					<Name>persists</Name>
					<Abstract type="html">Whether or not the value will be persisted to disk</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forConfigKey:persists:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/isEnabled</TokenIdentifier>
			<Abstract type="html">This method returns whether or not data collection is currently enabled. If disabled, no events will be logged, and no events currently in the event store will be sent to the data collector&apos;s servers.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEnabled</Declaration>
			
			<ReturnValue><Abstract type="html">Whether or not data collection is currently enabled.</Abstract></ReturnValue>
			<Anchor>//api/name/isEnabled</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/eventStoreCount</TokenIdentifier>
			<Abstract type="html">The count of events currently stored locally.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (NSInteger)eventStoreCount</Declaration>
			
			<ReturnValue><Abstract type="html">The count of events currently stored locally.</Abstract></ReturnValue>
			<Anchor>//api/name/eventStoreCount</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WTDataCollector/setValue:forRCSMetaKey:</TokenIdentifier>
			<Abstract type="html">Sets a new value for the given Remote Configuration Server meta key. Use this if you want to set Remote Configuration rules against arbitrary user-defined keys.</Abstract>
			<DeclaredIn>WTDataCollector.h</DeclaredIn>
			
			<Declaration>- (void)setValue:(NSString *)value forRCSMetaKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to store, as an NSString*</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the value to be associated with</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forRCSMetaKey:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
        
	</File>
</Tokens>