The Webtrends SDK is a analytics library for iOS. This guide will walk you through the initial setup process, from integrating the SDK with your project, to sending events to Webtrends.

#Installation
[CocoaPods](https://cocoapods.org) is the dependency manager for Swift and Objective-C Cocoa projects. It automates and streamlines the process of integrating libraries such as the Webtrends SDK into your project.

Webtrends SDK uses CocoaPods to manage project integration. It's broken into two sub pods, one for iOS devices, and one for WatchKit extensions. You can install the iOS library by itself, or both libraries, depending on your needs.

##Step 1 – Install CocoaPods
If you've never used CocoaPods, you’ll need to install it first. It's distributed as a ruby gem, and can be installed from the Terminal as follows:

	$ sudo gem install cocoapods

##Step 2 – Create a Podfile
Cocoapods uses a file called `Podfile` to manage third party code associated with a project. In your project's base directory, run the following commands in Terminal:

	$ touch Podfile
	$ open -a Xcode Podfile

Now that the `Podfile` has been created and opened, we'll add the information we need to install this and other pods using the relevant snippet below:

###I just need the SDK, no Apple Watch support
	source 'https://github.com/CocoaPods/Specs.git'
<<<<<<< HEAD
=======
	source 'https://github.com/Webtrends/ios-sdk.git'
>>>>>>> master
	
	pod 'Webtrends-SDK/Core', '~>3.0'


###I need everything, including Apple Watch support
	source 'https://github.com/CocoaPods/Specs.git'
<<<<<<< HEAD
=======
	source 'https://github.com/Webtrends/ios-sdk.git'
>>>>>>> master
	
	# You can find the exact names of your targets by running:
	#
	# xcodebuild -list
	#
	# from your project's root directory
	target 'MyApp' do
	  pod 'Webtrends-SDK/Core', '~> 3.0'
	end
	target 'MyApp WatchKit Extension' do
	  pod 'Webtrends-SDK/Watch', '~> 3.0'
	end	

##Step 3 – Install
Once your `Podfile` is saved, you're ready to actually install Pods using the following command, still from your project's root directory:

	$ pod install

This process will create a new file in your root directory called `[Project Name].xcworkspace`. Open your project from that file from now on, rather than the `.xcodeproj` that was used before.

##Step 4 – Set up webtrends.plist

<div style="text-align:center">
<img src="images/webtrends.plist_screenshot.png" alt="webtrends.plist screenshot" />
</div>

You can download an example copy of `webtrends.plist` [here](https://raw.githubusercontent.com/Webtrends/ios-sdk/master/Documentation/html/docs/webtrends.plist). Add the file to your project, open it, and replace `YOUR_DCSID_HERE` with your unique DCSID. There's a ton of configuration options available in `webtrends.plist`, but the only required setting is the DCSID. You can read more in the [Advanced Configuration Guide](Advanced-Configuration-Guide.html)

##Additional Swift Setup

Once the Webtrends Pod has been set up, you'll have to import the SDK to integrate the library into your Swift-based application's bridging header file. If you've never worked with bridging headers before, follow the directions for manually creating one from Apple's [Using Swift with Cocoa and Objective-C](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html) guide.

In a nutshell, you will need to create the bridging header in your application project, tell the compiler where it is, and update the search path to find the header files in the SDK.

In your bridging header, simply add the following line, which will make the entire core Webtrends SDK available to your swift app:

<div class="objective_c-sample-code"><pre><code>@import Foundation;
#import "WebtrendsSDK.h"</code></pre></div>

To actually use this header we need to tell the Swift compiler where it is, so open up your project’s build settings and find the **Swift Compiler — Code Generation** section. Change the project-level setting for Objective-C Bridging Header and change the value to point to our new header (e.g. YourApp/Bridging-Header.h for a project called 'YourApp’).

Finally, tell the compiler where to find the header files you will be using in the bridging header. Find the section called **Search Paths** and change the project-level setting for User Header Search Paths, adding a recursive entry for the **Pods** directory. The entry will look like **Pods/\*\***.

The [Webtrends WatchKit SDK Guide](Webtrends-WatchKit-SDK-Guide.html) has more information on setting up bridging headers for WatchKit apps.

##Step 5 – Start logging events
Once your `webtrends.plist` file is in order, you're ready to start logging events. In its default configuration, Webtrends SDK will log a lot of useful events for you automatically (See the [Automatic Events Guide](Automatic-Events-Guide.html) for more information). To manually log events of your own, use any of the `triggerEvent` methods documented in <WTDataCollector>. See the [Manual Event Logging Guide](Manual-Events-Guide.html) for more information.

##Sample Applications
We have developed a set of sample applications that illustrate and document how to configure an application to use the Webtrends iOS SDK. These applications may be cloned or downloaded directly from our public [Github repo](https://github.com/Webtrends/ios-sdk/tree/master/SampleApps). This repo contains both Objective-C and Swift sample applications and demonstrate all major aspects of implementation.